# =============================================================================
# src/simple_rag/graph.py - VERSION NETTOY√âE ET OPTIMIS√âE
# =============================================================================

from langchain import hub
from langchain_core.messages import HumanMessage, AIMessage
from langgraph.graph import END, START, StateGraph
from langchain_core.prompts import PromptTemplate
from langchain.prompts import ChatPromptTemplate

from shared import retrieval
from shared.utils import load_chat_model
from simple_rag.configuration import RagConfiguration
from simple_rag.state import GraphState, InputState

import re
import base64
from pathlib import Path
from typing import List, Dict, Any, Optional
import glob
import os

# =============================================================================
# EXTENSION DU GRAPHSTATE POUR SUPPORT VISUEL
# =============================================================================

# On doit √©tendre GraphState depuis state.py pour inclure les champs visuels
from dataclasses import dataclass, field
from typing import Annotated
from langchain_core.messages import AnyMessage
from langgraph.graph import add_messages

@dataclass(kw_only=True)
class ExtendedGraphState(GraphState):
    """GraphState √©tendu avec support visuel complet."""
    
    # Nouveaux champs pour le support visuel
    visual_elements: List[Dict[str, Any]] = field(default_factory=list)
    has_visual_content: bool = False
    image_path: Optional[str] = None
    best_visual: Optional[Dict[str, Any]] = None

# Utiliser le GraphState √©tendu pour le workflow
WorkflowState = ExtendedGraphState

# Imports conditionnels pour l'affichage
try:
    import chainlit as cl
    CHAINLIT_AVAILABLE = True
except ImportError:
    CHAINLIT_AVAILABLE = False

try:
    import streamlit as st
    STREAMLIT_AVAILABLE = True
except ImportError:
    STREAMLIT_AVAILABLE = False

# =============================================================================
# PROMPT SYSTEM POUR L'ANSD
# =============================================================================

ANSD_SYSTEM_PROMPT  = """Vous √™tes un expert statisticien de l'ANSD (Agence Nationale de la Statistique et de la D√©mographie du S√©n√©gal), sp√©cialis√© dans l'analyse de donn√©es d√©mographiques, √©conomiques et sociales du S√©n√©gal.

MISSION PRINCIPALE :
R√©pondre de mani√®re compl√®te et approfondie aux questions sur les statistiques du S√©n√©gal en utilisant PRIORITAIREMENT les documents fournis et en compl√©tant avec vos connaissances des publications officielles de l'ANSD.

SOURCES AUTORIS√âES :
‚úÖ Documents fournis dans le contexte (PRIORIT√â ABSOLUE)
‚úÖ Connaissances des rapports officiels ANSD publi√©s
‚úÖ Donn√©es du site officiel ANSD (www.ansd.sn)
‚úÖ Publications officielles des enqu√™tes ANSD (RGPH, EDS, ESPS, EHCVM, ENES)
‚úÖ Comptes nationaux et statistiques √©conomiques officielles du S√©n√©gal
‚úÖ Projections d√©mographiques officielles de l'ANSD

‚ùå SOURCES INTERDITES :
‚ùå Donn√©es d'autres pays pour combler les lacunes
‚ùå Estimations personnelles non bas√©es sur les sources ANSD
‚ùå Informations non officielles ou de sources tierces
‚ùå Projections personnelles non document√©es

R√àGLES DE R√âDACTION :
‚úÖ R√©ponse directe : SANS limitation de phrases - d√©veloppez autant que n√©cessaire
‚úÖ Contexte additionnel : SANS limitation - incluez toutes les informations pertinentes
‚úÖ Citez TOUJOURS vos sources pr√©cises (document + page ou publication ANSD)
‚úÖ Distinguez clairement les donn√©es des documents fournis vs connaissances ANSD
‚úÖ Donnez les chiffres EXACTS quand disponibles
‚úÖ Pr√©cisez SYST√âMATIQUEMENT les ann√©es de r√©f√©rence
‚úÖ Mentionnez les m√©thodologies d'enqu√™te

FORMAT DE R√âPONSE OBLIGATOIRE :

**R√âPONSE DIRECTE :**
[D√©veloppez la r√©ponse de mani√®re compl√®te et d√©taill√©e, sans limitation de longueur. Incluez tous les √©l√©ments pertinents pour une compr√©hension approfondie du sujet. Vous pouvez utiliser plusieurs paragraphes et d√©velopper les aspects importants.]

**DONN√âES PR√âCISES :**
- Chiffre exact : [valeur exacte avec unit√©]
- Ann√©e de r√©f√©rence : [ann√©e pr√©cise]
- Source : [nom exact du document, page X OU publication ANSD officielle]
- M√©thodologie : [enqu√™te/recensement utilis√©]

**CONTEXTE ADDITIONNEL :**
[D√©veloppez largement avec toutes les informations compl√©mentaires pertinentes, sans limitation de longueur.]

**LIMITATIONS/NOTES :**
[Pr√©cautions d'interpr√©tation, changements m√©thodologiques, d√©finitions sp√©cifiques]

DOCUMENTS ANSD DISPONIBLES :
{context}

Analysez maintenant ces documents et r√©pondez √† la question de l'utilisateur de mani√®re compl√®te et approfondie."""

# =============================================================================
# FONCTIONS DE D√âTECTION ET TRAITEMENT DES √âL√âMENTS VISUELS
# =============================================================================

# =============================================================================
# √âTAT DU GRAPHE AM√âLIOR√â AVEC SUPPORT VISUEL
# =============================================================================

class GraphState(GraphState):
    """√âtat √©tendu du graphe avec support visuel complet."""
    # H√©rite de GraphState existant et ajoute les champs visuels
    image_path: Optional[str] = None
    best_visual: Optional[Dict[str, Any]] = None

class VisualElementsManager:
    """Gestionnaire pour la d√©tection et l'affichage des √©l√©ments visuels."""
    
    def __init__(self):
        self.visual_keywords = {
            'image_indicators': ['image_path', 'chart_type', 'visual_type', 'is_table'],
            'content_patterns': ['graphique', 'figure', 'diagramme', 'tableau'],
            'file_extensions': ['.png', '.jpg', '.jpeg', '.svg', '.csv']
        }
    
    def extract_visual_elements(self, documents):
        """S√©pare les documents textuels et visuels."""
        text_docs = []
        visual_elements = []
        
        print(f"üîç Analyse de {len(documents)} documents...")
        
        for doc in documents:
            metadata = doc.metadata if hasattr(doc, 'metadata') else {}
            content = doc.page_content if hasattr(doc, 'page_content') else str(doc)
            
            is_visual, element_type = self._detect_visual_element(doc, metadata, content)
            
            if is_visual:
                visual_element = {
                    'type': element_type,
                    'metadata': metadata,
                    'content': content,
                    'document': doc,
                    'relevance_score': 0
                }
                visual_elements.append(visual_element)
            else:
                text_docs.append(doc)
        
        print(f"‚úÖ R√©sultat: {len(text_docs)} textuels, {len(visual_elements)} visuels")
        return text_docs, visual_elements
    
    def _detect_visual_element(self, doc, metadata, content):
        """D√©tecte si un document est un √©l√©ment visuel."""
        
        # V√©rification des m√©tadonn√©es
        for indicator in self.visual_keywords['image_indicators']:
            if indicator in metadata and metadata[indicator]:
                return True, 'visual_chart' if 'table' not in indicator else 'visual_table'
        
        # V√©rification du type de document
        doc_type = metadata.get('type', '').lower()
        if any(visual_type in doc_type for visual_type in ['visual', 'image', 'chart', 'table']):
            return True, 'visual_chart' if 'table' not in doc_type else 'visual_table'
        
        # V√©rification du contenu
        if content and self._is_table_content(content):
            return True, 'visual_table'
        
        # V√©rification des mots-cl√©s dans le contenu
        if content:
            content_lower = content.lower()
            chart_score = sum(1 for keyword in self.visual_keywords['content_patterns'] 
                            if keyword in content_lower)
            if chart_score >= 2:
                return True, 'visual_chart'
        
        return False, None
    
    def _is_table_content(self, content: str) -> bool:
        """D√©tecte si le contenu est tabulaire."""
        if not content or len(content.strip()) < 50:
            return False
        
        lines = content.split('\n')
        if len(lines) < 3:
            return False
        
        # Compteurs d'indicateurs
        pipe_lines = sum(1 for line in lines if '|' in line)
        tab_lines = sum(1 for line in lines if '\t' in line)
        number_lines = sum(1 for line in lines if re.search(r'\d+', line))
        
        # Score composite
        table_score = 0
        if pipe_lines >= 2: table_score += 3
        if tab_lines >= 2: table_score += 3
        if number_lines >= 3: table_score += 1
        
        return table_score >= 4
    
    def analyze_visual_relevance(self, visual_elements: List[Dict], user_question: str) -> List[Dict]:
        """Analyse la pertinence des √©l√©ments visuels."""
        if not visual_elements:
            return []
        
        question_lower = user_question.lower()
        relevant_elements = []
        
        # Mots-cl√©s th√©matiques ANSD
        theme_keywords = {
            'd√©mographie': ['population', 'habitants', 'd√©mographique', 'rgph'],
            '√©conomie': ['√©conomie', 'pib', 'croissance', 'secteur'],
            'emploi': ['emploi', 'travail', 'ch√¥mage', 'enes'],
            'pauvret√©': ['pauvret√©', 'pauvre', 'esps'],
            'sant√©': ['sant√©', 'mortalit√©', 'eds'],
            '√©ducation': ['√©ducation', '√©cole', 'scolarisation']
        }
        
        for element in visual_elements:
            relevance_score = 0
            content = element['content'].lower()
            
            # Score th√©matique
            for theme, keywords in theme_keywords.items():
                if any(keyword in question_lower for keyword in keywords):
                    theme_matches = sum(1 for keyword in keywords if keyword in content)
                    relevance_score += min(theme_matches, 3)
            
            # Score mots-cl√©s directs
            question_words = set(word for word in question_lower.split() if len(word) > 3)
            content_words = set(content.split())
            common_words = question_words.intersection(content_words)
            relevance_score += min(len(common_words), 3)
            
            # Seuil de pertinence
            if relevance_score >= 2:
                element['relevance_score'] = relevance_score
                relevant_elements.append(element)
        
        # Trier et limiter √† 3 √©l√©ments
        relevant_elements.sort(key=lambda x: x.get('relevance_score', 0), reverse=True)
        return relevant_elements[:3]

# =============================================================================
# CLASSE POUR L'AFFICHAGE DES VISUELS
# =============================================================================

# Supprimer compl√®tement la classe VisualDisplayManager qui n'est plus n√©cessaire
# et les fonctions create_smooth_transition et _send_message qui sont dupliqu√©es

# =============================================================================
# CLASSE POUR LA G√âN√âRATION DE SUGGESTIONS
# =============================================================================

class SuggestionsManager:
    """Gestionnaire pour la g√©n√©ration de suggestions de questions."""
    
    async def generate_suggestions(self, user_question: str, response_content: str, model) -> str:
        """G√©n√®re des suggestions de questions contextuelles."""
        
        suggestions_prompt = ChatPromptTemplate.from_messages([
            ("system", """G√©n√©rez 4 questions de suivi pertinentes pour ANSD bas√©es sur la question et r√©ponse fournies.

R√àGLES :
‚úÖ Questions compl√©mentaires sp√©cifiques au S√©n√©gal
‚úÖ Utilisez la terminologie ANSD (RGPH, EDS, ESPS, EHCVM, ENES)
‚úÖ M√©langez les angles : temporel, g√©ographique, th√©matique

FORMAT :
**‚ùì QUESTIONS SUGG√âR√âES :**

1. [Question sur l'√©volution temporelle]
2. [Question sur la r√©partition g√©ographique]
3. [Question sur un indicateur connexe]
4. [Question d'approfondissement]"""),
            ("user", f"Question originale: {user_question}\n\nR√©ponse fournie: {response_content[:500]}...")
        ])
        
        try:
            suggestions_chain = suggestions_prompt | model
            response = await suggestions_chain.ainvoke({})
            return f"\n\n{response.content}"
        except Exception as e:
            print(f"‚ùå Erreur suggestions: {e}")
            return self._generate_fallback_suggestions(user_question)
    
    def _generate_fallback_suggestions(self, user_question: str) -> str:
        """G√©n√®re des suggestions de base."""
        question_lower = user_question.lower()
        
        if 'population' in question_lower:
            return """
**‚ùì QUESTIONS SUGG√âR√âES :**

1. Quelle est l'√©volution de la population s√©n√©galaise selon les recensements ?
2. Comment la population se r√©partit-elle entre les r√©gions ?
3. Quels sont les indicateurs d√©mographiques cl√©s du S√©n√©gal ?
4. Quelle est la structure par √¢ge de la population ?"""
        
        else:
            return """
**‚ùì QUESTIONS SUGG√âR√âES :**

1. Quels sont les derniers r√©sultats du RGPH-5 ?
2. Comment les indicateurs sociaux ont-ils √©volu√© ?
3. Quelles sont les disparit√©s r√©gionales observ√©es ?
4. Quels d√©fis pose la collecte de donn√©es au S√©n√©gal ?"""

# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def format_docs_with_metadata(docs) -> str:
    """Formatage des documents avec m√©tadonn√©es."""
    if not docs:
        return "‚ùå Aucun document pertinent trouv√©."
    
    formatted_parts = []
    
    for i, doc in enumerate(docs, 1):
        metadata = doc.metadata if hasattr(doc, 'metadata') else {}
        
        # En-t√™te du document
        header = f"\n{'='*50}\nüìä DOCUMENT ANSD #{i}\n"
        
        # Informations source
        if 'pdf_name' in metadata:
            header += f"üìã Document: {metadata['pdf_name']}\n"
        if 'page_num' in metadata:
            header += f"üìñ Page: {metadata['page_num']}\n"
        
        header += f"{'='*50}\n"
        
        # Contenu
        content = doc.page_content.strip()
        formatted_parts.append(f"{header}\n{content}\n")
    
    return "\n".join(formatted_parts)

def evaluate_response_quality(response_content: str) -> bool:
    """√âvalue la qualit√© de la r√©ponse."""
    response_lower = response_content.lower()
    
    # Indicateurs d'√©chec
    failure_indicators = [
        "information non disponible",
        "aucune information", 
        "impossible de r√©pondre"
    ]
    
    if any(indicator in response_lower for indicator in failure_indicators):
        return False
    
    # Crit√®res de succ√®s
    has_numbers = bool(re.search(r'\d+', response_content))
    has_content = len(response_content) > 100
    has_structure = '**' in response_content
    
    return sum([has_numbers, has_content, has_structure]) >= 2

# =============================================================================
# FONCTIONS PRINCIPALES
# =============================================================================

async def retrieve(state, *, config):
    """R√©cup√©ration avec extraction des √©l√©ments visuels."""
    print("üîç ---RETRIEVE AVEC SUPPORT VISUEL---")
    
    # Gestion hybride du state
    if isinstance(state, dict):
        messages = state.get("messages", [])
    else:
        messages = getattr(state, "messages", [])
    
    # Extraire la question
    question = ""
    for msg in reversed(messages):
        if hasattr(msg, 'content') and msg.content:
            question = msg.content
            break
    
    if not question:
        return {"documents": [], "visual_elements": [], "has_visual_content": False}
    
    print(f"üìù Question: {question}")
    
    try:
        # Configuration
        safe_config = dict(config) if config else {}
        if 'configurable' not in safe_config:
            safe_config['configurable'] = {}
        
        safe_config['configurable']['search_kwargs'] = {"k": 20}
        
        # R√©cup√©ration des documents
        async with retrieval.make_retriever(safe_config) as retriever:
            documents = await retriever.ainvoke(question, safe_config)
            
            print(f"‚úÖ Documents r√©cup√©r√©s: {len(documents)}")
            
            # Gestionnaire d'√©l√©ments visuels
            visual_manager = VisualElementsManager()
            text_docs, visual_elements = visual_manager.extract_visual_elements(documents)
            
            # Analyser la pertinence
            relevant_visuals = visual_manager.analyze_visual_relevance(visual_elements, question)
            
            print(f"üìÑ Documents textuels: {len(text_docs)}")
            print(f"üé® √âl√©ments visuels pertinents: {len(relevant_visuals)}")
            
            return {
                "documents": text_docs,
                "visual_elements": relevant_visuals,
                "has_visual_content": len(relevant_visuals) > 0
            }
            
    except Exception as e:
        print(f"‚ùå Erreur r√©cup√©ration: {e}")
        return {"documents": [], "visual_elements": [], "has_visual_content": False}

async def generate(state, *, config):
    """G√©n√©ration avec int√©gration fluide des visuels."""
    print("ü§ñ ---GENERATE AVEC INT√âGRATION FLUIDE---")
    
    # Gestion hybride du state
    if isinstance(state, dict):
        messages = state.get("messages", [])
        documents = state.get("documents", [])
        visual_elements = state.get("visual_elements", [])
        has_visual = state.get("has_visual_content", False)
    else:
        messages = getattr(state, "messages", [])
        documents = getattr(state, "documents", [])
        visual_elements = getattr(state, "visual_elements", [])
        has_visual = getattr(state, "has_visual_content", False)
    
    # Configuration
    try:
        configuration = RagConfiguration.from_runnable_config(config)
        model = load_chat_model(configuration.model)
    except Exception as e:
        print(f"‚ùå Erreur configuration: {e}")
        return {"messages": [AIMessage(content="‚ùå Erreur de configuration.")]}
    
    # Extraire la question
    user_question = ""
    for msg in messages:
        if hasattr(msg, 'content'):
            user_question = msg.content
            break
    
    print(f"‚ùì Question: {user_question}")
    print(f"üìÑ Documents: {len(documents)}, üé® Visuels: {len(visual_elements)}")
    
    try:
        # √âTAPE 1: G√©n√©rer la r√©ponse textuelle d'abord
        if documents:
            print("üìù G√©n√©ration de la r√©ponse textuelle...")
            
            # Adapter le prompt selon la pr√©sence de visuels
            visual_note = ""
            if visual_elements:
                visual_note = f"\n\nNote: {len(visual_elements)} graphique(s)/tableau(x) pertinent(s) seront affich√©s automatiquement avec votre r√©ponse."
            
            prompt = ChatPromptTemplate.from_messages([
                ("system", ANSD_SYSTEM_PROMPT + visual_note),
                ("placeholder", "{messages}")
            ])
            
            context = format_docs_with_metadata(documents)
            rag_chain = prompt | model
            
            response = await rag_chain.ainvoke({
                "context": context,
                "messages": messages
            })
            
            response_content = response.content
            
            print(f"üìä R√©ponse g√©n√©r√©e: {len(response_content)} caract√®res")
            print(f"üîç Evaluation qualit√©...")
            
            # √âvaluer la qualit√© de la r√©ponse
            quality_ok = evaluate_response_quality(response_content)
            print(f"‚úÖ Qualit√© OK: {quality_ok}")
            
            if quality_ok:
                print("‚úÖ R√©ponse satisfaisante g√©n√©r√©e - Pr√©paration visuels...")
                
                # √âTAPE 2: Pr√©parer la r√©ponse avec int√©gration des visuels
                response_data = await display_response_with_visuals(
                    response_content, visual_elements, user_question, model
                )
                
                print(f"üîç DEBUG RESPONSE_DATA:")
                print(f"   Content length: {len(response_data['content'])}")
                print(f"   Image path: {response_data['image_path']}")
                print(f"   Has visual: {response_data['has_visual']}")
                
                final_result = {
                    "messages": [AIMessage(content=response_data["content"])],
                    "documents": documents,
                    "visual_elements": visual_elements,
                    "has_visual_content": response_data["has_visual"],
                    "image_path": response_data["image_path"],  # ‚úÖ MAINTENANT SUPPORT√â
                    "best_visual": response_data["best_visual"]  # ‚úÖ MAINTENANT SUPPORT√â
                }
                
                print(f"üîç DEBUG FINAL_RESULT keys: {list(final_result.keys())}")
                print(f"üîç FINAL_RESULT image_path: {final_result['image_path']}")
                
                return final_result
            
            else:
                print("‚ö†Ô∏è R√©ponse jug√©e insuffisante - passage au fallback...")
                # Continuer vers le fallback...
        else:
            print("‚ö†Ô∏è √âTAPE 2 IGNOR√âE : Aucun document disponible - passage direct au fallback")
        
        # Fallback: utiliser les connaissances ANSD
        print("üåê √âTAPE 3: Utilisation des connaissances ANSD...")
        
        fallback_prompt = ChatPromptTemplate.from_messages([
            ("system", "Vous √™tes un expert ANSD. R√©pondez en utilisant vos connaissances des publications officielles ANSD."),
            ("placeholder", "{messages}")
        ])
        
        fallback_chain = fallback_prompt | model
        fallback_response = await fallback_chain.ainvoke({"messages": messages})
        
        print(f"üìä Fallback r√©ponse g√©n√©r√©e: {len(fallback_response.content)} caract√®res")
        
        # Pr√©parer la r√©ponse fallback avec visuels si disponibles
        if visual_elements:
            print("üé® Fallback avec visuels...")
            response_data = await display_response_with_visuals(
                fallback_response.content, visual_elements, user_question, model
            )
            
            print(f"üîç DEBUG FALLBACK RESPONSE_DATA:")
            print(f"   Image path: {response_data['image_path']}")
            print(f"   Has visual: {response_data['has_visual']}")
            
            fallback_result = {
                "messages": [AIMessage(content=response_data["content"])],
                "documents": documents,
                "visual_elements": visual_elements,
                "image_path": response_data["image_path"],  # ‚úÖ MAINTENANT SUPPORT√â
                "has_visual_content": response_data["has_visual"],
                "best_visual": response_data["best_visual"]  # ‚úÖ MAINTENANT SUPPORT√â
            }
            
            print(f"üîç DEBUG FALLBACK_RESULT keys: {list(fallback_result.keys())}")
            return fallback_result
        else:
            print("üìù Fallback sans visuels...")
            return {
                "messages": [AIMessage(content=fallback_response.content)],
                "documents": documents,
                "visual_elements": visual_elements,
                "image_path": None,  # ‚úÖ MAINTENANT SUPPORT√â
                "has_visual_content": False,
                "best_visual": None  # ‚úÖ MAINTENANT SUPPORT√â
            }
        
    except Exception as e:
        print(f"‚ùå Erreur g√©n√©ration: {e}")
        return {
            "messages": [AIMessage(content="‚ùå Erreur lors de la g√©n√©ration de la r√©ponse.")],
            "documents": documents,
            "visual_elements": visual_elements,
            "has_visual_content": False,
            "image_path": None,  # ‚úÖ MAINTENANT SUPPORT√â
            "best_visual": None  # ‚úÖ MAINTENANT SUPPORT√â
        }

async def display_response_with_visuals(response_content: str, visual_elements: List[Dict], 
                                      user_question: str, model) -> Dict[str, Any]:
    """Pr√©pare la r√©ponse textuelle avec visuels int√©gr√©s pour l'app Chainlit."""
    
    # 1. Construire la r√©ponse compl√®te
    full_response = response_content
    
    # 2. Pr√©parer les √©l√©ments visuels
    best_visual = None
    image_path = None
    graph_title = ""
    
    if visual_elements:
        print(f"üé® Pr√©paration de {len(visual_elements)} √©l√©ments visuels...")
        
        # S√©lectionner le meilleur visuel
        best_visual = max(visual_elements, key=lambda x: x.get('relevance_score', 0))
        
        # Trouver le chemin de l'image
        image_path = find_image_path_for_visual(best_visual)
        
        if image_path and Path(image_path).exists():
            # Pr√©parer le titre du graphique pour la fin
            metadata = best_visual['metadata']
            caption = metadata.get('caption', 'Graphique ANSD')
            graph_title = f"üìä **{caption}**"
            
            print(f"‚úÖ Image pr√©par√©e avec titre pour la fin: {image_path}")
        else:
            print(f"‚ùå Image non trouv√©e pour: {best_visual['metadata']}")
    
    # 3. G√©n√©rer les suggestions
    try:
        suggestions_manager = SuggestionsManager()
        suggestions = await suggestions_manager.generate_suggestions(
            user_question, response_content, model
        )
        full_response += suggestions
    except Exception as e:
        print(f"‚ùå Erreur suggestions: {e}")
        full_response += "\n\n‚ùì Suggestions non disponibles"
    
    # 4. Ajouter les sources
    sources_count = len(visual_elements) + 10  # Estimation
    full_response += f"\n\nüìö **Sources consult√©es :** {sources_count} document(s) ANSD"
    
    # 5. Ajouter le titre du graphique √† la FIN (juste avant l'image)
    if graph_title:
        full_response += f"\n\n{graph_title}"
    
    # 6. RETOURNER les donn√©es pour l'app Chainlit
    return {
        "content": full_response,
        "image_path": image_path,
        "best_visual": best_visual,
        "has_visual": image_path is not None
    }

def find_image_path_for_visual(visual_element: Dict) -> Optional[str]:
    """Trouve le chemin de l'image pour un √©l√©ment visuel."""
    metadata = visual_element['metadata']
    
    print(f"üîç Recherche image pour: {metadata}")
    
    # M√©thode 1: V√©rifier les m√©tadonn√©es directes
    for key in ['image_path', 'source', 'file_path', 'path']:
        if key in metadata and metadata[key]:
            path = str(metadata[key])
            print(f"   Test m√©tadonn√©e {key}: {path}")
            
            if Path(path).exists():
                print(f"   ‚úÖ Trouv√© (direct): {path}")
                return path
                
            # Essayer avec le dossier images/
            filename = Path(path).name
            test_path = Path('images') / filename
            if test_path.exists():
                print(f"   ‚úÖ Trouv√© (images/): {test_path}")
                return str(test_path)
    
    # M√©thode 2: Recherche par patterns
    pdf_name = metadata.get('pdf_name', '')
    page_num = metadata.get('page_num', metadata.get('page', ''))
    
    if pdf_name and page_num:
        # Pattern bas√© sur votre CSV charts_index.csv
        pdf_clean = pdf_name.replace('.pdf', '').replace(' ', '*')
        
        patterns = [
            f"images/{pdf_clean}*p{page_num}*.png",
            f"images/*{pdf_clean}*{page_num}*.png",
            f"images/*p{page_num}*.png",
            f"images/*{page_num}*.png"
        ]
        
        for pattern in patterns:
            print(f"   Pattern: {pattern}")
            matches = glob.glob(pattern)
            if matches:
                print(f"   ‚úÖ Trouv√© (pattern): {matches[0]}")
                return matches[0]
    
    print(f"   ‚ùå Aucune image trouv√©e")
    return None

def create_smooth_transition(visual_element: Dict, user_question: str) -> str:
    """Cr√©e une transition fluide vers le graphique."""
    question_lower = user_question.lower()
    
    if any(word in question_lower for word in ['graphique', 'visualisation', 'courbe']):
        return "üìä **Voici le graphique demand√© :**"
    
    elif any(word in question_lower for word in ['√©volution', 'tendance']):
        return "üìà **Pour visualiser cette √©volution :**"
    
    elif 'population' in question_lower:
        return "üìä **Graphique d√©mographique associ√© :**"
    
    else:
        return "üìä **Graphique compl√©mentaire :**"

# Supprimer l'ancienne fonction _send_message qui n'est plus n√©cessaire
async def _send_message(content: str):
    """DEPRECATED - Ne plus utiliser, tout se fait en un seul cl.Message maintenant."""
    pass

# Suppression des fonctions de transition non n√©cessaires
async def _send_message(content: str):
    """DEPRECATED - Ne plus utiliser, tout se fait en un seul cl.Message maintenant."""
    pass

# =============================================================================
# CONFIGURATION DU WORKFLOW AVEC SUPPORT VISUEL COMPLET
# =============================================================================

workflow = StateGraph(WorkflowState, input=InputState, config_schema=RagConfiguration)

# D√©finir les noeuds
workflow.add_node("retrieve", retrieve)
workflow.add_node("generate", generate)

# Construire le graphe
workflow.add_edge(START, "retrieve")
workflow.add_edge("retrieve", "generate")
workflow.add_edge("generate", END)

# Compiler
graph = workflow.compile()
graph.name = "CleanedSimpleRagWithVisualsAndSuggestions"

# =============================================================================
# FONCTIONS DE DIAGNOSTIC (OPTIONNELLES)
# =============================================================================

def check_system_status():
    """V√©rifie l'√©tat du syst√®me."""
    print("üîç V√âRIFICATION SYST√àME:")
    print(f"   - Chainlit: {'‚úÖ' if CHAINLIT_AVAILABLE else '‚ùå'}")
    print(f"   - Streamlit: {'‚úÖ' if STREAMLIT_AVAILABLE else '‚ùå'}")
    print(f"   - Dossier images: {'‚úÖ' if Path('images').exists() else '‚ùå'}")
    
    if Path('images').exists():
        img_count = len(list(Path('images').glob('*.png')))
        print(f"   - Images PNG: {img_count} fichiers")

# Exporter les √©l√©ments principaux
__all__ = [
    'graph',
    'retrieve', 
    'generate',
    'VisualElementsManager',
    'VisualDisplayManager',
    'SuggestionsManager',
    'check_system_status'
]